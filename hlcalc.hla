program Calculator;
#include("stdlib.hhf");

type Op: enum {
    OP_PUT,
    OP_ADD,
    OP_NULL,
    OP_SUBTRACT,
    OP_MULTIPLY,
    OP_DIVIDE,
    OP_POWER
};

static
    x: int32 := 10;
    i: int32 := 1;
    acc: int32 := 0;
    o: int8;
    ans: int32 := 0;
    b: int32;
    buf: int64;
    neg_flag: boolean := false;
    _op: Op := OP_PUT;

procedure CollectDigit;
begin CollectDigit;
	mov(acc, ebx);
	
	sub(48, al);
    intmul(10, ebx);
    movsx(al, eax);
    add(eax, ebx);

    mov(ebx, acc);
end CollectDigit;

procedure OpPut;
begin OpPut;
    mov(acc, ans);
end OpPut;

procedure OpAdd;
begin OpAdd;
    mov(acc, eax);
    add(eax, ans);
    stdout.put("= ", ans, nl);
end OpAdd;

procedure OpSubtract;
begin OpSubtract;
    mov(acc, eax);
    sub(eax, ans);
    stdout.put("= ", ans, nl);
end OpSubtract;

procedure OpMultiply;
begin OpMultiply;
	mov(acc, eax);
	mov(ans, ebx);
	imul(ebx);
	mov(edx:eax, buf);
	stdout.put("= ", buf, nl);
end OpMultiply;

procedure OpDivide;
begin OpDivide;
	if (ans == 0) then stdout.put("!! /0", nl);
    else
        mov(acc, eax);
        cdq();
        idiv(ans, edx:eax);
        stdout.put("= ");
        stdout.puti32(eax);
        stdout.put("+");
        stdout.puti32(edx);
        stdout.put("/", ans, nl);
        stdout.newln();
    endif;
end OpDivide;

procedure OpPower;
begin OpPower;
	mov(ans, eax);

    while (acc > 1) do
        mul(ans);
        dec(acc);
    endwhile;
    
    stdout.put("= ");
    stdout.puti32(eax);
    stdout.newln();
end OpPower;

procedure Operate;
begin Operate;
    if (_op == OP_PUT) then
        OpPut();
        mov(OP_NULL, _op);
    elseif (_op == OP_ADD) then
        OpAdd();
        mov(OP_NULL, _op);
    elseif (_op == OP_SUBTRACT) then
        OpSubtract();
        mov(OP_NULL, _op);
    elseif (_op == OP_MULTIPLY) then
        OpMultiply();
        mov(OP_NULL, _op);
    elseif (_op == OP_DIVIDE) then
        OpDivide();
        mov(OP_NULL, _op);
    elseif (_op == OP_POWER) then
        OpPower();
        mov(OP_NULL, _op);
    endif;

    // Clear accumulator
    mov(0, acc);
end Operate;

begin Calculator;
    stdin.flushInput();

    forever
        stdin.getc();
        if (al >= '0' && al <= '9') then
            CollectDigit();
        elseif (al == 'q') then
            exit Calculator;
        elseif (al == '+') then
        	if (_op != OP_PUT) then Operate(); endif;
            mov(OP_ADD, _op);
        elseif (al == '-') then
        	if (_op != OP_PUT) then Operate(); endif;
            mov(OP_SUBTRACT, _op);
        elseif (al == '*') then
        	if (_op != OP_PUT) then Operate(); endif;
            mov(OP_MULTIPLY, _op);
        elseif (al == '/') then
        	if (_op != OP_PUT) then Operate(); endif;
            mov(OP_DIVIDE, _op);
        elseif (al == '^') then
        	if (_op != OP_PUT) then Operate(); endif;
            mov(OP_POWER, _op);
        elseif (stdin.eoln()) then
    		Operate();
    		mov(OP_PUT, _op);
        endif;
    endfor;
end Calculator;